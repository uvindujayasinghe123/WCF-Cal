//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.ServerAppServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerAppServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddValues", ReplyAction="http://tempuri.org/IService1/AddValuesResponse")]
        double AddValues(double valA, double valB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddValues", ReplyAction="http://tempuri.org/IService1/AddValuesResponse")]
        System.Threading.Tasks.Task<double> AddValuesAsync(double valA, double valB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SubstractValues", ReplyAction="http://tempuri.org/IService1/SubstractValuesResponse")]
        double SubstractValues(double valA, double valB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SubstractValues", ReplyAction="http://tempuri.org/IService1/SubstractValuesResponse")]
        System.Threading.Tasks.Task<double> SubstractValuesAsync(double valA, double valB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DivideValues", ReplyAction="http://tempuri.org/IService1/DivideValuesResponse")]
        double DivideValues(double valA, double valB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DivideValues", ReplyAction="http://tempuri.org/IService1/DivideValuesResponse")]
        System.Threading.Tasks.Task<double> DivideValuesAsync(double valA, double valB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MultiplyValues", ReplyAction="http://tempuri.org/IService1/MultiplyValuesResponse")]
        double MultiplyValues(double valA, double valB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MultiplyValues", ReplyAction="http://tempuri.org/IService1/MultiplyValuesResponse")]
        System.Threading.Tasks.Task<double> MultiplyValuesAsync(double valA, double valB);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ClientApp.ServerAppServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ClientApp.ServerAppServiceReference.IService1>, ClientApp.ServerAppServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double AddValues(double valA, double valB) {
            return base.Channel.AddValues(valA, valB);
        }
        
        public System.Threading.Tasks.Task<double> AddValuesAsync(double valA, double valB) {
            return base.Channel.AddValuesAsync(valA, valB);
        }
        
        public double SubstractValues(double valA, double valB) {
            return base.Channel.SubstractValues(valA, valB);
        }
        
        public System.Threading.Tasks.Task<double> SubstractValuesAsync(double valA, double valB) {
            return base.Channel.SubstractValuesAsync(valA, valB);
        }
        
        public double DivideValues(double valA, double valB) {
            return base.Channel.DivideValues(valA, valB);
        }
        
        public System.Threading.Tasks.Task<double> DivideValuesAsync(double valA, double valB) {
            return base.Channel.DivideValuesAsync(valA, valB);
        }
        
        public double MultiplyValues(double valA, double valB) {
            return base.Channel.MultiplyValues(valA, valB);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyValuesAsync(double valA, double valB) {
            return base.Channel.MultiplyValuesAsync(valA, valB);
        }
    }
}
